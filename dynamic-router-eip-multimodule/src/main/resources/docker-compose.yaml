#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: "3.5"

services:

  broker:
    image: docker.io/apachepulsar/pulsar:2.11.0
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - test_net
    ports:
      - "6650:6650"
      - "8081:8080"
    volumes:
      - /tmp/pulsar/broker/data:/pulsar/data
    command:
      bash -c "bin/pulsar standalone"

  main-router:
    image: docker.io/library/main-router:latest
    container_name: main-router
    hostname: main-router
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.main-router-router.entrypoints: web
      traefik.http.routers.main-router-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/main-router`)
      traefik.http.routers.main-router-router.service: main-router
      traefik.http.services.main-router.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/main-router/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - test_net

  number-generator-service:
    image: docker.io/library/number-generator-service:latest
    container_name: number-generator-service
    hostname: number-generator-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.number-generator-router.entrypoints: web
      traefik.http.routers.number-generator-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/number-generator`)
      traefik.http.routers.number-generator-router.service: number-generator
      traefik.http.services.number-generator.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/number-generator/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  tens-numbers-service:
    image: docker.io/library/tens-numbers-service:latest
    container_name: tens-numbers-service
    hostname: tens-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.tens-numbers-router.entrypoints: web
      traefik.http.routers.tens-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/tens-numbers`)
      traefik.http.routers.tens-numbers-router.service: tens-numbers
      traefik.http.services.tens-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/tens-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  nines-numbers-service:
    image: docker.io/library/nines-numbers-service:latest
    container_name: nines-numbers-service
    hostname: nines-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.nines-numbers-router.entrypoints: web
      traefik.http.routers.nines-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/nines-numbers`)
      traefik.http.routers.nines-numbers-router.service: nines-numbers
      traefik.http.services.nines-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/nines-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  eights-numbers-service:
    image: docker.io/library/eights-numbers-service:latest
    container_name: eights-numbers-service
    hostname: eights-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.eights-numbers-router.entrypoints: web
      traefik.http.routers.eights-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/eights-numbers`)
      traefik.http.routers.eights-numbers-router.service: eights-numbers
      traefik.http.services.eights-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/eights-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  sevens-numbers-service:
    image: docker.io/library/sevens-numbers-service:latest
    container_name: sevens-numbers-service
    hostname: sevens-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.sevens-numbers-router.entrypoints: web
      traefik.http.routers.sevens-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/sevens-numbers`)
      traefik.http.routers.sevens-numbers-router.service: sevens-numbers
      traefik.http.services.sevens-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/sevens-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  sixes-numbers-service:
    image: docker.io/library/sixes-numbers-service:latest
    container_name: sixes-numbers-service
    hostname: sixes-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.sixes-numbers-router.entrypoints: web
      traefik.http.routers.sixes-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/sixes-numbers`)
      traefik.http.routers.sixes-numbers-router.service: sixes-numbers
      traefik.http.services.sixes-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/sixes-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  fives-numbers-service:
    image: docker.io/library/fives-numbers-service:latest
    container_name: fives-numbers-service
    hostname: fives-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.fives-numbers-router.entrypoints: web
      traefik.http.routers.fives-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/fives-numbers`)
      traefik.http.routers.fives-numbers-router.service: fives-numbers
      traefik.http.services.fives-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/fives-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  fours-numbers-service:
    image: docker.io/library/fours-numbers-service:latest
    container_name: fours-numbers-service
    hostname: fours-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.fours-numbers-router.entrypoints: web
      traefik.http.routers.fours-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/fours-numbers`)
      traefik.http.routers.fours-numbers-router.service: fours-numbers
      traefik.http.services.fours-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/fours-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  threes-numbers-service:
    image: docker.io/library/threes-numbers-service:latest
    container_name: threes-numbers-service
    hostname: threes-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.threes-numbers-router.entrypoints: web
      traefik.http.routers.threes-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/threes-numbers`)
      traefik.http.routers.threes-numbers-router.service: threes-numbers
      traefik.http.services.threes-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/threes-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  even-numbers-service:
    image: docker.io/library/even-numbers-service:latest
    container_name: even-numbers-service
    hostname: even-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.even-numbers-router.entrypoints: web
      traefik.http.routers.even-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/even-numbers`)
      traefik.http.routers.even-numbers-router.service: even-numbers
      traefik.http.services.even-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/even-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  odd-numbers-service:
    image: docker.io/library/odd-numbers-service:latest
    container_name: odd-numbers-service
    hostname: odd-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.odd-numbers-router.entrypoints: web
      traefik.http.routers.odd-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/odd-numbers`)
      traefik.http.routers.odd-numbers-router.service: odd-numbers
      traefik.http.services.odd-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/odd-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  prime-numbers-service:
    image: docker.io/library/prime-numbers-service:latest
    container_name: prime-numbers-service
    hostname: prime-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.prime-numbers-router.entrypoints: web
      traefik.http.routers.prime-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/prime-numbers`)
      traefik.http.routers.prime-numbers-router.service: prime-numbers
      traefik.http.services.prime-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/prime-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  all-numbers-service:
    image: docker.io/library/all-numbers-service:latest
    container_name: all-numbers-service
    hostname: all-numbers-service
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.all-numbers-router.entrypoints: web
      traefik.http.routers.all-numbers-router.rule: HostRegexp(`{name:.+}`) && PathPrefix(`/all-numbers`)
      traefik.http.routers.all-numbers-router.service: all-numbers
      traefik.http.services.all-numbers.loadbalancer.server.port: 8080
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/all-numbers/actuator/health/ping" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      main-router:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - test_net

  traefik:
    image: docker.io/traefik:v2.9.9
    labels:
      traefik.enable: true
      stack.id: numbers
      traefik.http.routers.dashboard.entrypoints: web
      traefik.http.routers.dashboard.rule: HostRegexp(`data.{name:.+}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: dashboard-auth
    command:
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      - --accessLog=true
      - --accessLog.format=json
      - --api=true
      - --api.dashboard=true
      - --api.insecure=true
      - --entrypoints.web.address=:8888
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=test_net
      - --providers.docker.constraints=Label(`stack.id`,`numbers`)
    depends_on:
      main-router:
        condition: service_healthy
      number-generator-service:
        condition: service_healthy
      all-numbers-service:
        condition: service_healthy
      prime-numbers-service:
        condition: service_healthy
      odd-numbers-service:
        condition: service_healthy
      even-numbers-service:
        condition: service_healthy
      threes-numbers-service:
        condition: service_healthy
      fours-numbers-service:
        condition: service_healthy
      fives-numbers-service:
        condition: service_healthy
      sixes-numbers-service:
        condition: service_healthy
      sevens-numbers-service:
        condition: service_healthy
      eights-numbers-service:
        condition: service_healthy
      nines-numbers-service:
        condition: service_healthy
      tens-numbers-service:
        condition: service_healthy
    networks:
      - test_net

networks:
  test_net: { }
